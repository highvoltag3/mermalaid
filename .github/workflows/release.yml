name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  create-release:
    permissions:
      contents: write
    runs-on: ubuntu-latest
    outputs:
      release_id: ${{ steps.create-release.outputs.id }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Create Release
        id: create-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TAG_NAME=${GITHUB_REF#refs/tags/}
          echo "Creating release for tag: $TAG_NAME"
          
          # Check if release already exists
          if gh release view "$TAG_NAME" --repo "$GITHUB_REPOSITORY" &>/dev/null; then
            echo "Release already exists for tag $TAG_NAME"
            # Get release ID from existing release
            RELEASE_ID=$(gh release view "$TAG_NAME" --repo "$GITHUB_REPOSITORY" --json id --jq .id)
          else
            # Create draft release and get ID
            gh release create "$TAG_NAME" \
              --title "Release $TAG_NAME" \
              --notes "Release $TAG_NAME" \
              --draft \
              --repo "$GITHUB_REPOSITORY"
            # Get the release ID after creation
            RELEASE_ID=$(gh release view "$TAG_NAME" --repo "$GITHUB_REPOSITORY" --json id --jq .id)
          fi
          
          echo "Release ID: $RELEASE_ID"
          echo "id=$RELEASE_ID" >> $GITHUB_OUTPUT

  build-tauri:
    needs: create-release
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest'
            args: ''

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable

      - name: Install frontend dependencies
        run: npm install

      - name: Build frontend
        run: npm run build

      - name: Verify DMG tools
        run: |
          echo "Checking DMG creation prerequisites..."
          which hdiutil && echo "✓ hdiutil found" || echo "✗ hdiutil not found"
          xcode-select -p && echo "✓ Xcode Command Line Tools found" || echo "✗ Xcode Command Line Tools not found"

      - uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          RUST_BACKTRACE: 1
        with:
          projectPath: ./
          tagName: ${{ github.ref }}
          releaseName: Release ${{ github.ref_name }}
          args: ${{ matrix.args }}
